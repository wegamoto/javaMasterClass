package com.wewe.temjaiShop.service;

import com.wewe.temjaiShop.config.UploadProperties;
import com.wewe.temjaiShop.model.Category;
import com.wewe.temjaiShop.model.Product;
import com.wewe.temjaiShop.model.User;
import com.wewe.temjaiShop.repository.CategoryRepository;
import com.wewe.temjaiShop.repository.ProductRepository;
import com.wewe.temjaiShop.repository.UserRepository;
import jakarta.annotation.PostConstruct;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@Slf4j
public class ProductService {

    @Value("${upload.dir}") // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å application.properties ‡πÄ‡∏ä‡πà‡∏ô: upload.dir=uploads
    private String uploadDir;

    private static final long MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    private static final List<String> ALLOWED_CONTENT_TYPES = List.of("image/jpeg", "image/png");

    private final ProductRepository productRepository;
    private final UploadProperties uploadProperties;
    private final CategoryRepository categoryRepository;

    public ProductService(ProductRepository productRepository, UploadProperties uploadProperties, CategoryRepository categoryRepository, UserRepository userRepository) {
        this.productRepository = productRepository;
        this.uploadProperties = uploadProperties;
        this.categoryRepository = categoryRepository;
        this.userRepository = userRepository;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ uploadDir ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    @PostConstruct
    public void checkUploadDir() {
        Path path = Path.of(uploadDir).toAbsolutePath().normalize();
        System.out.println("üßæ [UPLOAD_DIR]: " + path);

        if (!Files.exists(path)) {
            System.err.println("‚ö†Ô∏è [WARNING] Upload directory does NOT exist: " + path);
        } else {
            System.out.println("‚úÖ Upload directory exists: " + path);
        }
    }

    private final UserRepository userRepository;


    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public List<Product> findAll() {
        return productRepository.findAll();
    }
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public void saveProduct(Product product) {
        productRepository.save(product);  // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ exception ‡πÄ‡∏ä‡πà‡∏ô field null
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
    public Product getProductById(Long id) {
        return productRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Product not found with id: " + id));
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    public Product createProduct(Product product) {

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å generate
        Product savedProduct = productRepository.save(product);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å id (‡πÄ‡∏ä‡πà‡∏ô P001)
        String generatedCode = String.format("P%03d", savedProduct.getId());
        savedProduct.setProductCode(generatedCode);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        return productRepository.save(savedProduct);  // ‡πÉ‡∏ä‡πâ productRepository.save(savedProduct)
    }

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    public Product updateProduct(Long id, Product updatedProduct, MultipartFile imageFile) {
        Product existingProduct = productRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid product ID: " + id));

        existingProduct.setName(updatedProduct.getName());
        existingProduct.setDescription(updatedProduct.getDescription());
        existingProduct.setPrice(updatedProduct.getPrice());

        // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if (imageFile != null && !imageFile.isEmpty()) {
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
            deleteImageIfExists(existingProduct.getImage());

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            String newimageUrl = saveImage(imageFile);
            existingProduct.setImage(newimageUrl);
        }

        return productRepository.save(existingProduct);
    }

    private void deleteImageIfExists(String imageName) {
        if (imageName == null || imageName.isEmpty()) return;

        String os = System.getProperty("os.name").toLowerCase();
        String uploadDir;

        if (os.contains("win")) {
            uploadDir = "C:/temjaishop/uploads/";
        } else {
            uploadDir = "/home/ubuntu/temjaishop/uploads/";
        }

        File file = new File(uploadDir + imageName);
        if (file.exists()) {
            file.delete();
        }
    }



    // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }

    public List<Product> getRecommendations(int page) {
        Pageable pageable = PageRequest.of(page, 6); // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏•‡∏∞ 6 ‡∏ä‡∏¥‡πâ‡∏ô
        return productRepository.findRecommendedProducts(pageable);
    }

    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    public List<Product> getRecommendationsForUser(String usernameOrEmail) {
        if (usernameOrEmail == null || usernameOrEmail.isBlank()) {
            return productRepository.findTop10ByOrderBySoldCountDesc();
        }

        Optional<User> optionalUser = userRepository.findByUsernameOrEmail(usernameOrEmail);

        if (optionalUser.isEmpty()) {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ email (‡∏Å‡∏£‡∏ì‡∏µ Facebook login)
            optionalUser = userRepository.findByUsernameOrEmail(usernameOrEmail);
        }

        if (optionalUser.isEmpty()) {
            return productRepository.findTop10ByOrderBySoldCountDesc();
        }

        User user = optionalUser.get();

        String favoriteCategory = user.getFavoriteCategory();

        if (favoriteCategory != null && !favoriteCategory.isBlank()) {
            return productRepository.findTop10ByCategory_NameOrderBySoldCountDesc(favoriteCategory);
        }

        return productRepository.findTop10ByOrderBySoldCountDesc();
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    public List<Product> getProductsByCategory(Long categoryId) {
        return productRepository.findByCategoryId(categoryId);
    }

    public List<Product> getFeaturedProducts() {
        // ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å ‡πÄ‡∏ä‡πà‡∏ô top 6 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        return productRepository.findAll();
    }

    public Optional<Product> findById(Long id) {
        return productRepository.findById(id);
    }

    private String saveImage(MultipartFile file) {
        String os = System.getProperty("os.name").toLowerCase();
        String uploadDir;

        if (os.contains("win")) {
            uploadDir = "C:/temjaishop/uploads/";
        } else {
            uploadDir = "/opt/temjaishop/uploads/";
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        String originalFilename = file.getOriginalFilename();
        String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
        String newFilename = UUID.randomUUID().toString() + "_" + originalFilename;

        try {
            Path path = Paths.get(uploadDir + newFilename);
            Files.createDirectories(path.getParent()); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            file.transferTo(path);
        } catch (IOException e) {
            throw new RuntimeException("Failed to save file", e);
        }

        return newFilename;
    }

    @Transactional
    public void saveProductWithImage(Product product, MultipartFile imageFile) throws IOException {
        if (isValidImageFile(imageFile)) {
            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            deleteOldImageIfExists(product.getImage());

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            String savedFilename = storeImageFile(imageFile);
            product.setImage(savedFilename);
        }

        productRepository.save(product);
    }

    private String storeImageFile(MultipartFile imageFile) throws IOException {
        String cleanFileName = sanitizeFileName(imageFile.getOriginalFilename());
        String savedFilename = UUID.randomUUID() + "_" + cleanFileName;

        Path uploadPath = getUploadPath();
        Files.createDirectories(uploadPath);

        Path filePath = uploadPath.resolve(savedFilename);
        imageFile.transferTo(filePath.toFile());

        return savedFilename;
    }

    private void deleteOldImageIfExists(String filename) {
        if (filename == null || filename.isEmpty()) return;

        String os = System.getProperty("os.name").toLowerCase();
        String uploadDir = os.contains("win") ?
                "C:/temjaishop/uploads/" : "/opt/temjaishop/uploads/";

        Path path = Paths.get(uploadDir, filename);
        try {
            Files.deleteIfExists(path);
        } catch (IOException e) {
            // ‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö flow ‡∏´‡∏•‡∏±‡∏Å
            System.err.println("Failed to delete old image: " + e.getMessage());
        }
    }

    private String sanitizeFileName(String originalFileName) {
        return originalFileName
                .replaceAll("[^a-zA-Z0-9\\.\\-_]", "_")
                .replace("'", "")
                .trim();
    }

    private Path getUploadPath() {
        return Paths.get(uploadProperties.getDir()).toAbsolutePath().normalize();
    }

    private boolean isValidImageFile(MultipartFile file) {
        if (file == null || file.isEmpty() || file.getOriginalFilename() == null) return false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
        if (!ALLOWED_CONTENT_TYPES.contains(file.getContentType())) {
            throw new IllegalArgumentException("Unsupported file type: " + file.getContentType());
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        if (file.getSize() > MAX_FILE_SIZE) {
            throw new IllegalArgumentException("File size exceeds the maximum allowed size of 5MB");
        }

        return true;
    }


//    public void saveProductWithImage(Product product, MultipartFile imageFile) throws IOException {
//        if (imageFile != null && !imageFile.isEmpty()) {
//            // ‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
//            String originalFileName = imageFile.getOriginalFilename();
//            if (originalFileName == null) {
//                throw new IOException("Invalid file name");
//            }
//
//            String cleanFileName = originalFileName
//                    .replaceAll("[^a-zA-Z0-9\\.\\-_]", "_")
//                    .replace("'", "")
//                    .trim();
//
//            // üîí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ UUID
//            String savedFilename = UUID.randomUUID() + "_" + cleanFileName;
//
//            // üìÇ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å application.yml
//            Path uploadPath = Paths.get(uploadProperties.getDir()).toAbsolutePath().normalize();
//            Files.createDirectories(uploadPath); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
//
//            // üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á disk
//            Path filePath = uploadPath.resolve(savedFilename);
//            imageFile.transferTo(filePath.toFile());
//
//            // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° path) ‡∏•‡∏á DB
//            product.setImage(savedFilename);
//        }
//
//        // üí° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
//        productRepository.save(product);
//    }

    public List<Product> searchProducts(String searchQuery) {
        return productRepository.findByNameContainingIgnoreCase(searchQuery);  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
    }

    public boolean increaseStock(Long productId, int amount) {
        Optional<Product> productOpt = productRepository.findByIdForUpdate(productId);
        if (productOpt.isPresent()) {
            Product product = productOpt.get();
            product.setStockQuantity(product.getStockQuantity() + amount);
            productRepository.save(product);
            return true;
        }
        return false;
    }

    // ‡∏•‡∏î stock ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    public boolean decreaseStock(Long productId, int amount) {
        Optional<Product> productOpt = productRepository.findById(productId);
        if (productOpt.isPresent()) {
            Product product = productOpt.get();
            if (product.getStockQuantity() >= amount) {
                product.setStockQuantity(product.getStockQuantity() - amount);
                productRepository.save(product);
                return true;
            }
        }
        return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    public boolean isInStock(Long productId, int quantity) {
        return productRepository.findById(productId)
                .map(product -> {
                    System.out.println("Checking stock for product " + product.getName() +
                            " | Available: " + product.getStockQuantity() +
                            " | Requested: " + quantity);
                    return product.getStockQuantity() >= quantity;
                })
                .orElse(false);
    }

    public List<Product> getTop5LowStockProducts() {
        return productRepository.findTop5ByOrderByStockQuantityAsc();
    }

    public List<Product> searchProductsByNameOrCategory(String keyword) {
        return productRepository.findByNameContainingIgnoreCaseOrCategory_NameContainingIgnoreCase(keyword, keyword);
    }

    @PostConstruct
    public void initUploadDir() {
        String os = System.getProperty("os.name").toLowerCase();

        if (os.contains("win")) {
            uploadDir = "C:/temjaishop/uploads";
        } else {
            uploadDir = "/opt/temjaishop/uploads";
        }

        System.out.println("üìÇ Upload Directory: " + uploadDir);
    }

    public List<Product> findLowStockProducts(int threshold) {
        return productRepository.findByStockQuantityLessThan(threshold);
    }

    public void importStockFromExcel(MultipartFile file) throws IOException {
        try (InputStream is = file.getInputStream(); Workbook workbook = new XSSFWorkbook(is)) {
            Sheet sheet = workbook.getSheetAt(0);
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String name = row.getCell(0).getStringCellValue();
                String categoryName = row.getCell(1).getStringCellValue();
                BigDecimal price = new BigDecimal(row.getCell(2).getNumericCellValue());
                int stockQuantity = (int) row.getCell(3).getNumericCellValue();

                Category category = categoryRepository.findByName(categoryName)
                        .orElseGet(() -> categoryRepository.save(new Category(categoryName)));

                Product product = productRepository.findByName(name)
                        .orElse(new Product());
                product.setName(name);
                product.setCategory(category);
                product.setPrice(price);
                product.setStockQuantity(stockQuantity);
                productRepository.save(product);
            }
        }
    }



}

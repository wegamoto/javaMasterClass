package com.wewe.weweShop.controller;

import com.wewe.weweShop.model.Order;
import com.wewe.weweShop.repository.OrderRepository;
import com.wewe.weweShop.service.CartService;
import com.wewe.weweShop.service.CurrencyService;
import com.wewe.weweShop.service.OrderService;
import com.wewe.weweShop.util.NumberToWords;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.security.Principal;
import java.text.DecimalFormat;
import java.util.List;

import static org.thymeleaf.util.NumberUtils.formatCurrency;

@Controller
@RequestMapping("/orders")
public class OrderController {

    private final CurrencyService currencyService;

    @Autowired
    private final OrderService orderService;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private CartService cartService; // ‡πÄ‡∏û‡∏¥‡πà‡∏° CartService

    @Autowired
    public OrderController(CurrencyService currencyService, OrderService orderService) {
        this.currencyService = currencyService;
        this.orderService = orderService;
    }

    @GetMapping("/orders")
    public String viewOrders(Model model, Authentication authentication) {
        String email = authentication.getName();

        boolean isAdmin = authentication.getAuthorities().stream()
                .anyMatch(auth -> auth.getAuthority().equals("ROLE_ADMIN"));

        List<Order> orders;
        if (isAdmin) {
            orders = orderService.getAllOrders(); // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        } else {
            orders = orderService.getOrdersByEmail(email); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user
        }

        model.addAttribute("orders", orders);
        model.addAttribute("isAdmin", isAdmin);
        return "orders/list";  // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á orders.html
    }

//    @PostMapping("/checkout")
//    public String checkout(String userEmail, Model model, Principal principal) {
//        if (userEmail == null) {
//            return "redirect:/login"; // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
//        }
//
//        // ‡∏î‡∏∂‡∏á userEmail ‡∏à‡∏≤‡∏Å principal
//        userEmail = principal.getName(); // principal.getName() ‡∏Ñ‡∏∑‡∏≠ email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
//
//        // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ checkout ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á success page
//        Long orderId = cartService.checkout(userEmail); // ‡πÉ‡∏ä‡πâ userEmail ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ checkout
//        model.addAttribute("orderId", orderId);
//        return "redirect:/orders/success?orderId=" + orderId;
//    }

    @GetMapping("/success")
    public String successPage(@RequestParam("orderId") Long orderId, Model model) {

        //‡∏î‡∏∂‡∏á Order  ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        model.addAttribute("orderId", orderId);
        // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á order ‡∏î‡πâ‡∏ß‡∏¢ orderId
        Order order = orderRepository.findById(orderId).orElseThrow(() -> new IllegalStateException("Order not found"));

        // ‡πÉ‡∏ä‡πâ CurrencyService ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤
        String formattedAmount = currencyService.formatCurrency(order.getTotalAmount());

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        String totalAmountInWords = NumberToWords.convertToThaiCurrency(order.getTotalAmount().doubleValue());


        model.addAttribute("order", order);
        model.addAttribute("orderId", orderId);
        model.addAttribute("totalAmountInWords", totalAmountInWords); // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Thymeleaf

        return "orders/success";  // ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå success.html ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå resources/templates/orders
    }

        // üßç ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    @GetMapping("/user/orders")
    public String viewUserOrders(Model model) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String email = auth.getName(); // ‡πÉ‡∏ä‡πâ email ‡∏´‡∏£‡∏∑‡∏≠ username
        List<Order> orders = orderService.getOrdersByEmail(email);
        model.addAttribute("orders", orders);
        return "orders"; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á orders.html
    }

//    // üîé ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//    @GetMapping("/user/orders/{id}")
//    public String viewOrderDetail(@PathVariable Long id, Model model) {
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        String email = auth.getName();
//
//        Order order = orderService.getOrderByIdAndEmail(id, email);
//        model.addAttribute("order", order);
//        return "order-detail"; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á order-detail.html
//    }

    // üëë ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    @GetMapping("/admin/orders")
    public String viewOrders(Model model) {
        List<Order> orders = orderRepository.findAll();
        model.addAttribute("orders", orders);
        return "order-list"; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á order-list.html
    }
}

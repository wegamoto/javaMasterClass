package com.wewe.weweShop.controller;

import com.wewe.weweShop.dto.CartItemForm;
import com.wewe.weweShop.model.CartItem;
import com.wewe.weweShop.model.Order;
import com.wewe.weweShop.model.OrderItem;
import com.wewe.weweShop.repository.CartItemRepository;
import com.wewe.weweShop.service.CartItemService;
import com.wewe.weweShop.service.CartService;
import com.wewe.weweShop.service.OrderService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.math.BigDecimal;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Controller
@Slf4j
@RequestMapping("/cart")
public class CartController {

    @Autowired
    private final CartService cartService;

    @Autowired
    private final CartItemRepository cartItemRepository = null;

    @Autowired
    private OrderService orderService;

    @Autowired
    private CartItemService cartItemService;

    @Autowired
    public CartController(CartService cartService) {
        this.cartService = cartService;
    }

    // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    @GetMapping("/cart/view")
    public String viewCart(Model model) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        Integer cartItemCount = cartItemService.getTotalQuantityInCart();

        // ‡∏™‡πà‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô model ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        model.addAttribute("cartItemCount", cartItemCount);

        return "cart/view"; // ‡∏ä‡∏∑‡πà‡∏≠ view ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (GET /cart)
    @GetMapping
    public String showCart(Model model, @RequestParam("userEmail") String userEmail) {
        List<CartItem> cartItems = cartService.getCartItems(userEmail);
        model.addAttribute("cartItems", cartItems);
        return "cart";  // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (cart.html)
    }

    // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    @GetMapping("/view")
    public String viewCart(Model model, Principal principal) {

        if (principal == null) {
            return "redirect:/login"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        }

        // ‡∏î‡∏∂‡∏á userEmail ‡∏à‡∏≤‡∏Å principal
        String userEmail = principal.getName(); // ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å principal

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ cartService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        List<CartItem> cartItems = cartService.getCartItems(userEmail);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        BigDecimal total = cartItems.stream()
                .map(item -> {
                    BigDecimal price = item.getPrice() != null ? item.getPrice() : BigDecimal.ZERO;
                    int quantity = item.getQuantity() != null ? item.getQuantity() : 0;
                    return price.multiply(BigDecimal.valueOf(quantity));
                })
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        model.addAttribute("cartItems", cartItems);
        model.addAttribute("total", total);
        return "cart";
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å RequestParam
    @PostMapping("/add")
    public String addToCart(@RequestParam("productId") Long productId,
                            @RequestParam("quantity") @Min(1) int quantity,
                            Principal principal) {

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ principal (‡∏´‡∏£‡∏∑‡∏≠ user) ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (principal == null || principal.getName() == null || principal.getName().isEmpty()) {
            throw new IllegalArgumentException("User email cannot be null or empty.");
        }

        String userEmail = principal.getName(); // ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å principal

        cartService.addToCart(userEmail,productId, quantity);
        return "redirect:/cart/view";
    }

    @GetMapping("/cart/count")
    @ResponseBody
    public Integer getCartItemCount(Principal principal) {
        String email = principal.getName(); // ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß principal ‡∏Ñ‡∏∑‡∏≠ email
        return cartService.getCartItemCount(email);
    }


    @PostMapping("/cart/add")
    public String addToCart(@RequestParam("productId") Long productId,
                            @RequestParam("quantity") int quantity,
                            Principal principal, // ‡πÉ‡∏ä‡πâ Principal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                            RedirectAttributes redirectAttributes) {

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        cartService.addProductToCart(productId, quantity, principal);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        redirectAttributes.addFlashAttribute("message", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

        // Redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        return "redirect:/recommendations"; // ‡∏´‡∏£‡∏∑‡∏≠ redirect:/cart ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Form
    @PostMapping("/addForm")
    public String addToCart(@ModelAttribute @Valid CartItemForm form,
                            BindingResult result,
                            String userEmail) {
        if (result.hasErrors()) {
            return "redirect:/products?error=invalid";
        }
        cartService.addToCart(userEmail, form.getProductId(), form.getQuantity());
        return "redirect:/cart/view"; // (‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å /view ‡πÄ‡∏õ‡πá‡∏ô /cart/view)
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    @PostMapping("/update")
    public String updateCartItem(@RequestParam("productId") Long productId,
                                 @RequestParam("quantity") @Min(1) int quantity) {
        cartService.updateCartItem(productId, quantity);
        return "redirect:/cart/view";
    }

    // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    @PostMapping("/remove")
    public String removeCartItem(@RequestParam("productId") Long productId,
                                 Principal principal) {
        cartService.removeCartItem(principal, productId);
        return "redirect:/cart/view";
    }

    // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    @PostMapping("/clear")
    public String clearCart(Principal principal) {
        String userEmail = principal.getName();
        cartService.clearCart(userEmail);
        return "redirect:/cart/view";
    }

//    @PostMapping("/checkout")
//    public String checkout(Principal principal) {
//        if (principal == null) {
//            return "redirect:/login";
//        }
//
//        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å checkout ‡∏ú‡πà‡∏≤‡∏ô service ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö orderId,totalAmount ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
//        Long orderId = cartService.checkout(principal);
//        Double totalAmount = cartService.getTotalAmount(principal);
//
//        // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ success ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á orderId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
//        return "redirect:/orders/success?orderId=" + orderId + "&totalAmount=" + totalAmount;
//    }

    @PostMapping("/checkout")
    public String processCheckout(Principal principal, RedirectAttributes redirectAttributes) {
        if (principal == null) {
            log.warn("Checkout ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
            redirectAttributes.addFlashAttribute("error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            return "redirect:/login";
        }

        String userEmail = principal.getName();
        log.info("‡πÄ‡∏£‡∏¥‡πà‡∏° checkout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {}", userEmail);

        try {
            Order order = orderService.createOrderFromCart(principal);
            log.info("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Order ID = {}, ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ = {}", order.getId(), userEmail);

            cartService.clearCart(userEmail);
            log.info("‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", userEmail);

            return "redirect:/checkout/success";

        } catch (IllegalStateException e) {
            // üü° ‡∏ñ‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            log.warn("Checkout ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á): {}", e.getMessage());
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/cart/view"; // ‚ùó redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà cart/view ‡∏û‡∏£‡πâ‡∏≠‡∏° Flash message
        } catch (Exception e) {
            log.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ checkout ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {}", userEmail, e);
            redirectAttributes.addFlashAttribute("error", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            return "redirect:/cart/view";
        }
    }

}
